// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package br.edu.ifce.postit.server.controller;

public final class NoteControllerImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("void createNote(br.edu.ifce.postit.server.model.Note)"),
	new java.rmi.server.Operation("void deleteNote(br.edu.ifce.postit.server.model.Note)"),
	new java.rmi.server.Operation("java.util.List getNotesByUser(br.edu.ifce.postit.server.model.User)"),
	new java.rmi.server.Operation("void updateNote(br.edu.ifce.postit.server.model.Note)")
    };
    
    private static final long interfaceHash = -2107341449853343627L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (opnum < 0) {
	    if (hash == -57884682164639427L) {
		opnum = 0;
	    } else if (hash == -5279288368716504063L) {
		opnum = 1;
	    } else if (hash == -6994967948027812471L) {
		opnum = 2;
	    } else if (hash == -7850498547155207022L) {
		opnum = 3;
	    } else {
		throw new java.rmi.UnmarshalException("invalid method hash");
	    }
	} else {
	    if (hash != interfaceHash)
		throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	}
	
	br.edu.ifce.postit.server.controller.NoteControllerImpl server = (br.edu.ifce.postit.server.controller.NoteControllerImpl) obj;
	switch (opnum) {
	case 0: // createNote(Note)
	{
	    br.edu.ifce.postit.server.model.Note $param_Note_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Note_1 = (br.edu.ifce.postit.server.model.Note) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.createNote($param_Note_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // deleteNote(Note)
	{
	    br.edu.ifce.postit.server.model.Note $param_Note_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Note_1 = (br.edu.ifce.postit.server.model.Note) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.deleteNote($param_Note_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // getNotesByUser(User)
	{
	    br.edu.ifce.postit.server.model.User $param_User_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_User_1 = (br.edu.ifce.postit.server.model.User) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.List $result = server.getNotesByUser($param_User_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // updateNote(Note)
	{
	    br.edu.ifce.postit.server.model.Note $param_Note_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Note_1 = (br.edu.ifce.postit.server.model.Note) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.updateNote($param_Note_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
