// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package br.edu.ifce.postit.server.controller;

public final class NoteControllerImpl_Stub
    extends java.rmi.server.RemoteStub
    implements br.edu.ifce.postit.server.controller.NoteController, java.rmi.Remote
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("void createNote(br.edu.ifce.postit.server.model.Note)"),
	new java.rmi.server.Operation("void deleteNote(br.edu.ifce.postit.server.model.Note)"),
	new java.rmi.server.Operation("java.util.List getNotesByUser(br.edu.ifce.postit.server.model.User)"),
	new java.rmi.server.Operation("void updateNote(br.edu.ifce.postit.server.model.Note)")
    };
    
    private static final long interfaceHash = -2107341449853343627L;
    
    private static final long serialVersionUID = 2;
    
    private static boolean useNewInvoke;
    private static java.lang.reflect.Method $method_createNote_0;
    private static java.lang.reflect.Method $method_deleteNote_1;
    private static java.lang.reflect.Method $method_getNotesByUser_2;
    private static java.lang.reflect.Method $method_updateNote_3;
    
    static {
	try {
	    java.rmi.server.RemoteRef.class.getMethod("invoke",
		new java.lang.Class[] {
		    java.rmi.Remote.class,
		    java.lang.reflect.Method.class,
		    java.lang.Object[].class,
		    long.class
		});
	    useNewInvoke = true;
	    $method_createNote_0 = br.edu.ifce.postit.server.controller.NoteController.class.getMethod("createNote", new java.lang.Class[] {br.edu.ifce.postit.server.model.Note.class});
	    $method_deleteNote_1 = br.edu.ifce.postit.server.controller.NoteController.class.getMethod("deleteNote", new java.lang.Class[] {br.edu.ifce.postit.server.model.Note.class});
	    $method_getNotesByUser_2 = br.edu.ifce.postit.server.controller.NoteController.class.getMethod("getNotesByUser", new java.lang.Class[] {br.edu.ifce.postit.server.model.User.class});
	    $method_updateNote_3 = br.edu.ifce.postit.server.controller.NoteController.class.getMethod("updateNote", new java.lang.Class[] {br.edu.ifce.postit.server.model.Note.class});
	} catch (java.lang.NoSuchMethodException e) {
	    useNewInvoke = false;
	}
    }
    
    // constructors
    public NoteControllerImpl_Stub() {
	super();
    }
    public NoteControllerImpl_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of createNote(Note)
    public void createNote(br.edu.ifce.postit.server.model.Note $param_Note_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_createNote_0, new java.lang.Object[] {$param_Note_1}, -57884682164639427L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_Note_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of deleteNote(Note)
    public void deleteNote(br.edu.ifce.postit.server.model.Note $param_Note_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_deleteNote_1, new java.lang.Object[] {$param_Note_1}, -5279288368716504063L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 1, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_Note_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getNotesByUser(User)
    public java.util.List getNotesByUser(br.edu.ifce.postit.server.model.User $param_User_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_getNotesByUser_2, new java.lang.Object[] {$param_User_1}, -6994967948027812471L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 2, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_User_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of updateNote(Note)
    public void updateNote(br.edu.ifce.postit.server.model.Note $param_Note_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_updateNote_3, new java.lang.Object[] {$param_Note_1}, -7850498547155207022L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 3, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_Note_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
